# *******************************************************************************
# Copyright 2024-2025 Arm Limited and affiliates.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# *******************************************************************************

name: "CI AArch64"

#* To avoid duplicate jobs running when both push and PR is satisfied, we use this:
#* https://github.com/orgs/community/discussions/26940#discussioncomment-5686753
on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - ".github/**"
      - "cmake/**"
      - "examples/**"
      - "include/**"
      - "src/common/**"
      - "src/cpu/*"
      - "src/cpu/aarch64/**"
      - "tests/**"
      - "CMakeLists.txt"
  #* allow manual trigger of workflow when needed.
  workflow_dispatch:

#* Stop stale workflows when pull requests are updated: https://stackoverflow.com/a/70972844
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

# Declare default permissions as read only.
permissions: read-all

jobs:
  build-acl-cache:
    uses: ./.github/workflows/aarch64-acl.yml

  build-and-test:
    needs: build-acl-cache
    strategy:
      matrix:
        config: [
          { name: MacOS, label: macos-14, threading: SEQ, toolset: clang, build: Release, testset: SMOKE },
          { name: cb100, label: ubuntu-24.04-arm, threading: OMP, toolset: gcc, build: Release, testset: SMOKE },
          { name: c6g, label: ah-ubuntu_22_04-c6g_4x-50, threading: OMP, toolset: gcc, build: Release, testset: CI },
          { name: c6g, label: ah-ubuntu_22_04-c6g_2x-50, threading: OMP, toolset: clang, build: Debug, testset: SMOKE },
          { name: c7g, label: ah-ubuntu_22_04-c7g_4x-50, threading: OMP, toolset: gcc, build: Release, testset: CI }
        ]

    name: ${{ matrix.config.name }}, ${{ matrix.config.toolset }}, ${{ matrix.config.threading }}, ${{ matrix.config.build }}
    runs-on: ${{ matrix.config.label }}
    steps:
      - name: Checkout oneDNN
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: oneDNN

      - name: Read version file
        id: get-versions
        run: |
          content=`cat ${{ github.workspace }}/oneDNN/.github/automation/aarch64/ci.json`
          content="${content//[$'\t\r\n$ ']}"
          echo "output=$content" >> $GITHUB_OUTPUT

      # Note: This will create a github actions cache
      - name: Get latest CMake and Ninja
        uses: lukka/get-cmake@5f6e04f5267c8133f1273bf2103583fc72c46b17 # v3.31.5
        with:
          cmakeVersion: 3.31.0
          ninjaVersion: 1.12.0

      - if: ${{ (contains(matrix.config.label,'ubuntu') && (matrix.config.threading == 'OMP')) }}
        name: Install openmp
        run: |
          sudo apt install -y libomp-dev

      - if: ${{ (contains(matrix.config.label,'ubuntu') && (matrix.config.toolset == 'gcc')) }}
        name: Install gcc
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt update -y
          sudo apt install -y g++-${{ fromJson(steps.get-versions.outputs.output).dependencies.gcc }}

      - if: ${{ (contains(matrix.config.label,'ubuntu') && (matrix.config.toolset == 'clang')) }}
        name: Install clang
        uses: KyleMayes/install-llvm-action@e0a8dc9cb8a22e8a7696e8a91a4e9581bec13181
        with:
          version: ${{ fromJson(steps.get-versions.outputs.output).dependencies.clang }}

      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install scipy
        if: ${{ matrix.config.build == 'Release' }}
        run: pip install scipy

      - name: Clone ACL
        run: ${{ github.workspace }}/oneDNN/.github/automation/aarch64/build_acl.sh
        env:
          ACL_ACTION: clone
          ACL_ROOT_DIR: ${{ github.workspace }}/ComputeLibrary
          ACL_VERSION: ${{ fromJson(steps.get-versions.outputs.output).dependencies.acl }}

      - name: Get ACL commit hash for cache key
        id: get_acl_commit_hash
        run: (cd ${{ github.workspace }}/ComputeLibrary && echo "ACLCommitHash=$(git rev-parse --short HEAD)") >> $GITHUB_OUTPUT

      - name: Get system name
        id: get_system_name
        run: (echo "SystemName=$(uname)") >> $GITHUB_OUTPUT

      - name: Restore cached ACL
        id: cache-acl-restore
        uses: actions/cache/restore@v4
        with:
          key: ${{ steps.get_system_name.outputs.SystemName }}-acl-${{ matrix.config.toolset }}-${{ matrix.config.build }}-${{ steps.get_acl_commit_hash.outputs.ACLCommitHash }}
          path: ${{ github.workspace }}/ComputeLibrary/build

      - name: Configure oneDNN
        run: ${{ github.workspace }}/oneDNN/.github/automation/aarch64/build.sh
        working-directory: ${{ github.workspace }}/oneDNN
        env:
          ACL_ROOT_DIR: ${{ github.workspace }}/ComputeLibrary
          BUILD_TOOLSET: ${{ matrix.config.toolset }}
          CMAKE_BUILD_TYPE: ${{ matrix.config.build }}
          CMAKE_GENERATOR: Ninja
          GCC_VERSION: ${{ fromJson(steps.get-versions.outputs.output).dependencies.gcc }}
          ONEDNN_ACTION: configure
          ONEDNN_TEST_SET: ${{ matrix.config.testset }}
          ONEDNN_THREADING: ${{ matrix.config.threading }}

      - name: Build oneDNN
        run: ${{ github.workspace }}/oneDNN/.github/automation/aarch64/build.sh
        working-directory: ${{ github.workspace }}/oneDNN
        env:
          ONEDNN_ACTION: build

      - name: Run oneDNN tests
        run: ${{ github.workspace }}/oneDNN/.github/automation/aarch64/test.sh
        working-directory: ${{ github.workspace }}/oneDNN/build
        env:
          BUILD_TOOLSET: ${{ matrix.config.toolset }}
          CMAKE_BUILD_TYPE: ${{ matrix.config.build }}
          CTEST_PARALLEL_LEVEL: 6
          DYLD_LIBRARY_PATH: ${{ github.workspace }}/ComputeLibrary/build
          ONEDNN_THREADING: ${{ matrix.config.threading }}

      ## Performance test steps ##
      - name: Checkout oneDNN base
        if: ${{ matrix.config.build == 'Release' }}
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.base_ref }}
          path: oneDNN_base

      # TODO :: Create separate pipeline to cache oneDNN base
      - name: Configure oneDNN base
        if: ${{ matrix.config.build == 'Release' }}
        run: ${{ github.workspace }}/oneDNN/.github/automation/build_aarch64.sh
        working-directory: ${{ github.workspace }}/oneDNN_base
        env:
          ACL_ROOT_DIR: ${{ github.workspace }}/ComputeLibrary
          BUILD_TOOLSET: ${{ matrix.config.toolset }}
          CMAKE_BUILD_TYPE: ${{ matrix.config.build }}
          CMAKE_GENERATOR: Ninja
          GCC_VERSION: 13
          ONEDNN_ACTION: configure
          ONEDNN_TEST_SET: ${{ matrix.config.testset }}
          ONEDNN_THREADING: ${{ matrix.config.threading }}

      - name: Build oneDNN base
        if: ${{ matrix.config.build == 'Release' }}
        run: ${{ github.workspace }}/oneDNN/.github/automation/build_aarch64.sh
        working-directory: ${{ github.workspace }}/oneDNN_base
        env:
          ONEDNN_ACTION: build

      - shell: bash
        if: ${{ matrix.config.build == 'Release' }}
        run: |
          OMP_NUM_THREADS=4 bash ${{ github.workspace }}/oneDNN/.github/automation/performance/bench_performance.sh ${{ github.workspace }}/oneDNN_base/build/tests/benchdnn/benchdnn ${{ github.workspace }}/oneDNN/build/tests/benchdnn/benchdnn base.txt new.txt
          OMP_NUM_THREADS=16 bash ${{ github.workspace }}/oneDNN/.github/automation/performance/bench_performance.sh ${{ github.workspace }}/oneDNN_base/build/tests/benchdnn/benchdnn ${{ github.workspace }}/oneDNN/build/tests/benchdnn/benchdnn base.txt new.txt
        env:
          DYLD_LIBRARY_PATH: ${{ github.workspace }}/ComputeLibrary/build

      - name: Compare performance test results
        if: ${{ matrix.config.build == 'Release' }}
        id: performance-test
        continue-on-error: true
        run: python ${{ github.workspace }}/oneDNN/.github/automation/performance/benchdnn_comparison.py base.txt new.txt

      - name: Check performance test failure
        if: ${{ matrix.config.build == 'Release' && steps.performance-test.outputs.pass != 'True' }}
        run: echo "::warning file=ci-aarch64.yml,line=1,col=1::${{ steps.performance-test.outputs.message }}"

  # This job adds a check named "CI AArch64" that represents overall
  # workflow status and can be used in branch rulesets
  status:
    needs: build-and-test
    runs-on: ubuntu-latest
    name: "CI AArch64"
    steps:
      - name: Print success
        run: echo Success
