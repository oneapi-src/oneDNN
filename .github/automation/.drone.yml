# *******************************************************************************
# Copyright 2020-2022 Arm Limited and affiliates.
# Copyright 2020-2021 FUJITSU LIMITED
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# *******************************************************************************

kind: pipeline
name: Ubuntu20+ACL

platform:
  arch: arm64

steps:
- name: gcc10-test+ACL
  image: ubuntu:20.04
  commands:
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update && apt-get install -y git build-essential cmake scons gcc-10 g++-10
  - update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 1 && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 1
  - .github/automation/build_acl.sh  --version 21.11 --arch arm64-v8a --root-dir $(pwd)/ComputeLibrary
  - .github/automation/build.sh --threading omp --mode Release --source-dir $(pwd) --build-dir $(pwd)/build --acl-dir $(pwd)/ComputeLibrary
  - .github/automation/test.sh --test-kind gtest --build-dir $(pwd)/build --report-dir $(pwd)/report

---
kind: pipeline
name: Ubuntu20

platform:
  arch: arm64

steps:
- name: gcc10-test
  image: ubuntu:20.04
  commands:
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update && apt-get install -y git build-essential cmake gcc-10 g++-10
  - update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 1 && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 1
  - .github/automation/build.sh --threading omp --mode Release --source-dir $(pwd) --build-dir $(pwd)/build
  - .github/automation/test.sh --test-kind gtest --build-dir $(pwd)/build --report-dir $(pwd)/report

---
kind: pipeline
name: Ubuntu18-clang

platform:
  arch: arm64

steps:
- name: clang-test
  image: ubuntu:18.04
  commands:
  - apt-get update && apt-get install -y sudo git build-essential cmake
  - .github/automation/env/clang.sh
  - export CC=clang
  - export CXX=clang++
  - .github/automation/build.sh --threading omp --mode Release --source-dir $(pwd) --build-dir $(pwd)/build
  - .github/automation/test.sh --test-kind gtest --build-dir $(pwd)/build --report-dir $(pwd)/report

---
kind: pipeline
name: Ubuntu18-clang+ACL

platform:
  arch: arm64

steps:
- name: clang-test+ACL
  image: ubuntu:18.04
  commands:
  - apt-get update && apt-get install -y sudo git build-essential cmake scons
  - .github/automation/env/clang.sh
  - export CC=clang
  - export CXX=clang++
  - .github/automation/build_acl.sh  --version 21.11 --arch arm64-v8a --root-dir $(pwd)/ComputeLibrary
  - .github/automation/build.sh --threading omp --mode Release --source-dir $(pwd) --build-dir $(pwd)/build --acl-dir $(pwd)/ComputeLibrary
  - .github/automation/test.sh --test-kind gtest --build-dir $(pwd)/build --report-dir $(pwd)/report

---
kind: pipeline
name: Ubuntu18

platform:
  arch: arm64

steps:
- name: gcc-test
  image: ubuntu:18.04
  commands:
  - apt-get update && apt-get install -y git build-essential cmake
  - .github/automation/build.sh --threading omp --mode Release --source-dir $(pwd) --build-dir $(pwd)/build
  - .github/automation/test.sh --test-kind gtest --build-dir $(pwd)/build --report-dir $(pwd)/report

---
kind: pipeline
name: Ubuntu18+ACL

platform:
  arch: arm64

steps:
- name: gcc-test+ACL
  image: ubuntu:18.04
  commands:
  - apt-get update && apt-get install -y git build-essential cmake scons
  - .github/automation/build_acl.sh  --version 21.11 --arch arm64-v8a --root-dir $(pwd)/ComputeLibrary
  - .github/automation/build.sh --threading omp --mode Release --source-dir $(pwd) --build-dir $(pwd)/build --acl-dir $(pwd)/ComputeLibrary
  - .github/automation/test.sh --test-kind gtest --build-dir $(pwd)/build --report-dir $(pwd)/report

---
kind: pipeline
name: Ubuntu18-SVE512

platform:
  arch: amd64

steps:
- name: gcc-jit-test-SVE512
  image: ubuntu:18.04
  commands:
  - apt-get update && apt-get install -y git build-essential cmake binutils-aarch64-linux-gnu crossbuild-essential-arm64 pkg-config-aarch64-linux-gnu python3 wget libglib2.0-dev
  - .github/automation/env/qemu.sh
  - export CC=aarch64-linux-gnu-gcc
  - export CXX=aarch64-linux-gnu-g++
  - .github/automation/build.sh --threading omp --mode Release --source-dir $(pwd) --build-dir $(pwd)/build --cmake-opt "-DDNNL_TARGET_ARCH=AARCH64 -DCMAKE_SYSTEM_NAME=Linux -DCMAKE_SYSTEM_PROCESSOR=AARCH64 -DCMAKE_FIND_ROOT_PATH=/usr/aarch64-linux-gnu -DDNNL_TARGET_EMULATOR=qemu-aarch64"
  - export QEMU_LD_PREFIX=/usr/aarch64-linux-gnu
  - export QEMU_CPU="max,sve512=on"
  - .github/automation/test.sh --test-kind gtest --build-dir $(pwd)/build --report-dir $(pwd)/report

---
kind: pipeline
name: Ubuntu18-SVE256

platform:
  arch: amd64

steps:
- name: gcc-jit-test-SVE256
  image: ubuntu:18.04
  commands:
  - apt-get update && apt-get install -y git build-essential cmake binutils-aarch64-linux-gnu crossbuild-essential-arm64 pkg-config-aarch64-linux-gnu python3 wget libglib2.0-dev
  - .github/automation/env/qemu.sh
  - export CC=aarch64-linux-gnu-gcc
  - export CXX=aarch64-linux-gnu-g++
  - .github/automation/build.sh --threading omp --mode Release --source-dir $(pwd) --build-dir $(pwd)/build --cmake-opt "-DDNNL_TARGET_ARCH=AARCH64 -DCMAKE_SYSTEM_NAME=Linux -DCMAKE_SYSTEM_PROCESSOR=AARCH64 -DCMAKE_FIND_ROOT_PATH=/usr/aarch64-linux-gnu -DDNNL_TARGET_EMULATOR=qemu-aarch64"
  - export QEMU_LD_PREFIX=/usr/aarch64-linux-gnu
  - export QEMU_CPU="max,sve256=on"
  - .github/automation/test.sh --test-kind gtest --build-dir $(pwd)/build --report-dir $(pwd)/report

---
kind: pipeline
name: Ubuntu18-SVE128

platform:
  arch: amd64

steps:
- name: gcc-jit-test-SVE128
  image: ubuntu:18.04
  commands:
  - apt-get update && apt-get install -y git build-essential cmake binutils-aarch64-linux-gnu crossbuild-essential-arm64 pkg-config-aarch64-linux-gnu python3 wget libglib2.0-dev
  - .github/automation/env/qemu.sh
  - export CC=aarch64-linux-gnu-gcc
  - export CXX=aarch64-linux-gnu-g++
  - .github/automation/build.sh --threading omp --mode Release --source-dir $(pwd) --build-dir $(pwd)/build --cmake-opt "-DDNNL_TARGET_ARCH=AARCH64 -DCMAKE_SYSTEM_NAME=Linux -DCMAKE_SYSTEM_PROCESSOR=AARCH64 -DCMAKE_FIND_ROOT_PATH=/usr/aarch64-linux-gnu -DDNNL_TARGET_EMULATOR=qemu-aarch64"
  - export QEMU_LD_PREFIX=/usr/aarch64-linux-gnu
  - export QEMU_CPU="max,sve128=on"
  - .github/automation/test.sh --test-kind gtest --build-dir $(pwd)/build --report-dir $(pwd)/report

---
kind: pipeline
name: Ubuntu18-build-debug

platform:
  arch: amd64

steps:
- name: gcc-build-debug
  image: ubuntu:18.04
  commands:
  - apt-get update && apt-get install -y git build-essential cmake binutils-aarch64-linux-gnu crossbuild-essential-arm64 pkg-config-aarch64-linux-gnu python3 wget libglib2.0-dev
  - export CC=aarch64-linux-gnu-gcc
  - export CXX=aarch64-linux-gnu-g++
  - .github/automation/build.sh --threading omp --mode Debug --source-dir $(pwd) --build-dir $(pwd)/build --cmake-opt "-DDNNL_TARGET_ARCH=AARCH64 -DCMAKE_SYSTEM_NAME=Linux -DCMAKE_SYSTEM_PROCESSOR=AARCH64 -DCMAKE_FIND_ROOT_PATH=/usr/aarch64-linux-gnu -DDNNL_TARGET_EMULATOR=qemu-aarch64"
